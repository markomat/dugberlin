diff --git a/plugins/FeedsUserProcessor.inc b/plugins/FeedsUserProcessor.inc
index d01db43..d1098c8 100644
--- a/plugins/FeedsUserProcessor.inc
+++ b/plugins/FeedsUserProcessor.inc
@@ -10,6 +10,21 @@
  */
 class FeedsUserProcessor extends FeedsProcessor {
   /**
+   * Unencrypted password.
+   */
+  const PASS_UNENCRYPTED = 'none';
+
+  /**
+   * MD5 encrypted password.
+   */
+  const PASS_MD5 = 'md5';
+
+  /**
+   * SHA512 encrypted password.
+   */
+  const PASS_SHA512 = 'sha512';
+
+  /**
    * Define entity type.
    */
   public function entityType() {
@@ -72,6 +87,12 @@ class FeedsUserProcessor extends FeedsProcessor {
     }
 
     user_save($account, $edit);
+    if ($account->uid && !empty($account->pass_crypted)) {
+      db_update('users')
+        ->fields(array('pass' => $account->pass_crypted))
+        ->condition('uid', $account->uid)
+        ->execute();
+    }
     if ($account->uid && !empty($account->openid)) {
       $authmap = array(
         'uid' => $account->uid,
@@ -136,10 +157,13 @@ class FeedsUserProcessor extends FeedsProcessor {
   }
 
   /**
-   * Override setTargetElement to operate on a target item that is a node.
+   * Override setTargetElement() to operate on a target item that is an user.
    */
-  public function setTargetElement(FeedsSource $source, $target_user, $target_element, $value) {
+  public function setTargetElement(FeedsSource $source, $target_user, $target_element, $value, $mapping = array()) {
     switch ($target_element) {
+      case 'pass':
+        $this->setPassTarget($source, $target_user, $target_element, $value, $mapping);
+        break;
       case 'created':
         $target_user->created = feeds_to_unixtime($value, REQUEST_TIME);
         break;
@@ -173,8 +197,10 @@ class FeedsUserProcessor extends FeedsProcessor {
         'description' => t('The created (e. g. joined) data of the user.'),
        ),
       'pass' => array(
-        'name' => t('Unencrypted Password'),
-        'description' => t('The unencrypted user password.'),
+        'name' => t('Password'),
+        'description' => t('The user password.'),
+        'summary_callback' => array($this, 'passSummaryCallback'),
+        'form_callback' => array($this, 'passFormCallback'),
       ),
       'status' => array(
         'name' => t('Account status'),
@@ -231,4 +257,123 @@ class FeedsUserProcessor extends FeedsProcessor {
     }
     return 0;
   }
+
+  /**
+   * Summary callback for pass mapper.
+   *
+   * @param array $mapping
+   *   Associative array of the mapping settings.
+   * @param array $target
+   *   Array of target settings, as defined by the processor.
+   * @param array $form
+   *   The whole mapping form.
+   * @param array $form_state
+   *   The form state of the mapping form.
+   *
+   * @return string
+   *   Returns, as a string that may contain HTML, the summary to display while
+   *   the full form isn't visible.
+   *   If the return value is empty, no summary and no option to view the form
+   *   will be displayed.
+   */
+  public function passSummaryCallback($mapping, $target, $form, $form_state) {
+    $options = $this->passSummaryCallbackOptions();
+    if (!isset($mapping['pass_encryption'])) {
+      $mapping['pass_encryption'] = self::PASS_UNENCRYPTED;
+    }
+    return t('Password encryption: <strong>@encryption</strong>', array('@encryption' => $options[$mapping['pass_encryption']]));
+  }
+
+  /**
+   * Returns the list of available password encryption methods.
+   *
+   * Used by ::passSummaryCallback().
+   *
+   * @return array
+   *    An array of password encryption option titles.
+   * @see passSummaryCallback()
+   */
+  protected function passSummaryCallbackOptions() {
+    return array(
+      self::PASS_UNENCRYPTED => t('None'),
+      self::PASS_MD5 => t('MD5'),
+      self::PASS_SHA512 => t('SHA512'),
+    );
+  }
+
+  /**
+   * Settings form callback for pass mapper.
+   *
+   * @param array $mapping
+   *   Associative array of the mapping settings.
+   * @param array $target
+   *   Array of target settings, as defined by the processor.
+   * @param array $form
+   *   The whole mapping form.
+   * @param array $form_state
+   *   The form state of the mapping form.
+   *
+   * @return array
+   *   Mapping configuration form for pass mapper.
+   */
+  public function passFormCallback($mapping, $target, $form, $form_state) {
+    return array(
+      'pass_encryption' => array(
+        '#type' => 'select',
+        '#title' => t('Password encryption'),
+        '#options' => $this->passFormCallbackOptions(),
+        '#default_value' => !empty($mapping['pass_encryption']) ? $mapping['pass_encryption'] : self::PASS_UNENCRYPTED,
+      ),
+    );
+  }
+
+  /**
+   * Returns the list of available password encryption methods.
+   *
+   * Used by ::passFormCallback().
+   *
+   * @return array
+   *    An array of password encryption option titles.
+   * @see passFormCallback()
+   */
+  protected function passFormCallbackOptions() {
+    return array(
+      self::PASS_UNENCRYPTED => t('Unencrypted'),
+      self::PASS_MD5 => t('MD5 (used in older versions of Drupal)'),
+      self::PASS_SHA512 => t('SHA512 (default in Drupal 7)'),
+    );
+  }
+
+  /**
+   * Sets the password on the user target.
+   *
+   * @see setTargetElement()
+   */
+  protected function setPassTarget($source, $target_user, $target_element, $value, $mapping) {
+    if (empty($value)) {
+      return;
+    }
+    if (!isset($mapping['pass_encryption'])) {
+      $mapping['pass_encryption'] = self::PASS_UNENCRYPTED;
+    }
+
+    switch ($mapping['pass_encryption']) {
+      case self::PASS_MD5:
+        require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
+        $new_hash = user_hash_password($value);
+        if ($new_hash) {
+          // Indicate an updated password.
+          $new_hash  = 'U' . $new_hash;
+          $target_user->pass_crypted = $new_hash;
+        }
+        break;
+      case self::PASS_SHA512:
+        $target_user->pass_crypted = $value;
+        break;
+      default:
+        $target_user->pass = $value;
+        break;
+
+    }
+  }
 }
diff --git a/tests/feeds/users.csv b/tests/feeds/users.csv
index aede81c..eb13a19 100644
--- a/tests/feeds/users.csv
+++ b/tests/feeds/users.csv
@@ -1,6 +1,6 @@
-name,mail,since,password
-Morticia,morticia@example.com,1244347500,mort
-Fester,fester@example.com,1241865600,fest
-Gomez,gomez@example.com,1228572000,gome
-Wednesday,wednesdayexample.com,1228347137,wedn
-Pugsley,pugsley@example,1228260225,pugs
+name,mail,since,password,password_md5,password_sha512
+Morticia,morticia@example.com,1244347500,mort,e0108a7eb91670308fff8179a4785453,$S$DfuNE4ur7Jq8xVoJURGm8oMIYunKd366KQUE6akc3EXW/ym9ghpq
+Fester,fester@example.com,1241865600,fest,c8cce3815094f01f0ab774fd4f7a77d4,$S$DjJPqmjlWTIen0nQrG3a.vA71Vc0DqCpKuB.g9zmBMnGzIV6JxqH
+Gomez,gomez@example.com,1228572000,gome,8a5346b9a510f1f698ab0062b71201ac,$S$Dv.EtHlTfnrxuWGLbe3cf31mD9MF6.4u2Z46M2o2dMGgQGzi7m/5
+Wednesday,wednesdayexample.com,1228347137,wedn,fefb673afaf531dbd78771976a150dc8,$S$DdPzksGh/c8UukipWagAhTzaqUp/eNHVPiC.x6URBQyA503Z41PI
+Pugsley,pugsley@example,1228260225,pugs,09189568a8ee4d0addf53d2f6e4847cd,$S$D1oUihjrYXr.4iesN8Sfw1rVRLdo188v0NRGgcNR/V09oIyYPYmZ
diff --git a/tests/feeds_processor_user.test b/tests/feeds_processor_user.test
index 73f8d06..20ebf63 100644
--- a/tests/feeds_processor_user.test
+++ b/tests/feeds_processor_user.test
@@ -6,7 +6,7 @@
  */
 
 /**
- * Test aggregating a feed as data records.
+ * Test aggregating a feed as user items.
  */
 class FeedsCSVtoUsersTest extends FeedsWebTestCase {
   public static function getInfo() {
@@ -18,7 +18,7 @@ class FeedsCSVtoUsersTest extends FeedsWebTestCase {
   }
 
   /**
-   * Test node creation, refreshing/deleting feeds and feed items.
+   * Test user creation, refreshing/deleting feeds and feed items.
    */
   public function test() {
     // Create an importer.
@@ -114,9 +114,131 @@ class FeedsCSVtoUsersTest extends FeedsWebTestCase {
     $this->assertText('Failed importing 2 user');
 
     // Attempt to log in as one of the imported users.
-    $account = user_load_by_name('Fester');
+    $this->feedsLoginUser('Fester', 'fest');
+  }
+
+  /**
+   * Test if users with md5 passwords can login after import.
+   */
+  public function testMD5() {
+    // Create an importer.
+    $this->createImporterConfiguration('User import', 'user_import');
+
+    // Set and configure plugins.
+    $this->setPlugin('user_import', 'FeedsFileFetcher');
+    $this->setPlugin('user_import', 'FeedsCSVParser');
+    $this->setPlugin('user_import', 'FeedsUserProcessor');
+
+    // Go to mapping page and create a couple of mappings.
+    $mappings = array(
+      0 => array(
+        'source' => 'name',
+        'target' => 'name',
+        'unique' => FALSE,
+      ),
+      1 => array(
+        'source' => 'mail',
+        'target' => 'mail',
+        'unique' => TRUE,
+      ),
+      2 => array(
+        'source' => 'since',
+        'target' => 'created',
+      ),
+      3 => array(
+        'source' => 'password_md5',
+        'target' => 'pass',
+        'pass_encryption' => 'md5',
+      ),
+    );
+    $this->addMappings('user_import', $mappings);
+
+    // Use standalone form.
+    $edit = array(
+      'content_type' => '',
+    );
+    $this->drupalPost('admin/structure/feeds/user_import/settings', $edit, 'Save');
+
+    // Import CSV file.
+    $this->importFile('user_import', $this->absolutePath() . '/tests/feeds/users.csv');
+
+    // Assert result.
+    $this->assertText('Created 3 users');
+
+    // Try to login as each successful imported user.
+    $this->feedsLoginUser('Morticia', 'mort');
+    $this->feedsLoginUser('Fester', 'fest');
+    $this->feedsLoginUser('Gomez', 'gome');
+  }
+
+  /**
+   * Test if users with sha512 passwords can login after import.
+   */
+  public function testSha512() {
+    // Create an importer.
+    $this->createImporterConfiguration('User import', 'user_import');
+
+    // Set and configure plugins.
+    $this->setPlugin('user_import', 'FeedsFileFetcher');
+    $this->setPlugin('user_import', 'FeedsCSVParser');
+    $this->setPlugin('user_import', 'FeedsUserProcessor');
+
+    // Go to mapping page and create a couple of mappings.
+    $mappings = array(
+      0 => array(
+        'source' => 'name',
+        'target' => 'name',
+        'unique' => FALSE,
+      ),
+      1 => array(
+        'source' => 'mail',
+        'target' => 'mail',
+        'unique' => TRUE,
+      ),
+      2 => array(
+        'source' => 'since',
+        'target' => 'created',
+      ),
+      3 => array(
+        'source' => 'password_sha512',
+        'target' => 'pass',
+        'pass_encryption' => 'sha512',
+      ),
+    );
+    $this->addMappings('user_import', $mappings);
+
+    // Use standalone form.
+    $edit = array(
+      'content_type' => '',
+    );
+    $this->drupalPost('admin/structure/feeds/user_import/settings', $edit, 'Save');
+
+    // Import CSV file.
+    $this->importFile('user_import', $this->absolutePath() . '/tests/feeds/users.csv');
+
+    // Assert result.
+    $this->assertText('Created 3 users');
+
+    // Try to login as each successful imported user.
+    $this->feedsLoginUser('Morticia', 'mort');
+    $this->feedsLoginUser('Fester', 'fest');
+    $this->feedsLoginUser('Gomez', 'gome');
+  }
+
+  /**
+   * Log in an imported user.
+   *
+   * @param string $username
+   *   The user's username.
+   * @param string $password
+   *   The user's password.
+   *
+   * @return void
+   */
+  public function feedsLoginUser($username, $password) {
+    $account = user_load_by_name($username);
     $this->assertTrue($account, 'Imported user account loaded.');
-    $account->pass_raw = 'fest';
+    $account->pass_raw = $password;
     $this->drupalLogin($account);
   }
 }
